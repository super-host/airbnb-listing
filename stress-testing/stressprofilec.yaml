#
# Keyspace name and create CQL
#
keyspace: stresstest

keyspace_definition: |
  CREATE KEYSPACE stresstest WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 3};
#
# Table name and create CQL
#
table: listings
table_definition: |
  CREATE TABLE IF NOT EXISTS listings(
    listingid uuid,
    userid uuid,
    updated_at_short text,
    updated_at timestamp,
    title text,
    description text,
    location text,
    price float,
    maxguests int,
    roomtype text,
    accomodationtype text,
    beds int,
    bedrooms int,
    bathrooms int,
    overallrating int,
    PRIMARY KEY ((listingid), updated_at_short)
  );

extra_definitions:
  - CREATE INDEX IF NOT EXISTS updated_at_short_idx
   ON stresstest.listings (updated_at_short);
#
# Meta information for generating data
#
columnspec:
  - name: listingid
    size: fixed(18) #In chars, no. of chars of UUID
    population: uniform(1..100000)  # equal events per host
  - name: userid
    size: fixed(18)
    population: uniform(1..1000) # 1000 potential users
  - name: updated_at_short
    size: fixed(10) 
    population: uniform(1..365)
  - name: title
    size: uniform(4..20)
  - name: description
    size: gaussian(100...500)
  - name: location
    size: uniform(4..20)
  - name: price
    size: gaussian(20..300) 
  - name: maxguests
    size: uniform(1..6)
  - name: roomtype
    size: uniform(4..20) 
  - name: accomodationtype
    size: uniform(4..20) 
  - name: beds
    size: uniform(0..10)  
  - name: bedrooms
    size: uniform(0..5) 
  - name: bathrooms
    size: uniform(1..3) 
  - name: overallrating
    size: uniform(1..10)  
#
# Specs for insert queries
#
insert:
  partitions: fixed(1)      # 1 partition per batch
  batchtype: UNLOGGED       # use unlogged batches
  select: fixed(10)/10      # no chance of skipping a row when generating inserts
#
# Read queries to run against the schema
#
queries:
  getupdatedlistings:
    cql: select * from listings where updated_at_short = ?
    fields: samerow             # pick selection values from same row in partition
